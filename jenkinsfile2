pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "lokilokesh/dind-node-jenkins"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            agent {
                docker {
                    image 'node:16'
                    args '-v ${WORKSPACE}:/app'
                }
            }
            steps {
                echo "Installing Dependencies"
                sh 'npm install'
            }
        }

        stage('Test') {
            agent {
                docker {
                    image 'node:16'
                    args '-v ${WORKSPACE}:/app'
                }
            }
            steps {
                sh "npm test"
            }
        }

        stage("SyncSecurity") {
            steps {
                echo 'Scanning using Snyk Security...'
                snykSecurity(
                    snykInstallation: 'sync@latest',
                    snykTokenId: 'SYNK-TOKEN',
                )
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    // Generate a timestamp
                    def timestamp = new Date().format("yyyyMMdd_HHmmss")
                    // Combine build number and timestamp for the tag
                    def imageTag = "${BUILD_NUMBER}-${timestamp}"
                    
                    // Build the Docker image
                    sh "docker build -t ${DOCKER_IMAGE}:${imageTag} ."
                    
                    // Log in to DockerHub
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_id', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        sh 'echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin'
                    }
                    
                    // Push the image to DockerHub
                    sh "docker push ${DOCKER_IMAGE}:${imageTag}"
                    
                    // Optionally, tag and push as 'latest' as well
                    sh "docker tag ${DOCKER_IMAGE}:${imageTag} ${DOCKER_IMAGE}:latest"
                    sh "docker push ${DOCKER_IMAGE}:latest"
                }
            }
        }
    }
}